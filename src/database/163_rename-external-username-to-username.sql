-- ============================================================================
-- 163. game_records ÌÖåÏù¥Î∏î Ïª¨ÎüºÎ™Ö Î≥ÄÍ≤Ω: external_username ‚Üí username
-- ============================================================================
-- ÏûëÏÑ±Ïùº: 2025-10-10
-- Î™©Ï†Å: Î≤†ÌåÖ ÎÇ¥Ïó≠ ÌôîÎ©¥ ÌëúÏãúÎ•º ÏúÑÌïú Ïª¨ÎüºÎ™Ö ÌÜµÏùº
-- Í∑ºÍ±∞: BettingManagement.tsxÏóêÏÑú users ÌÖåÏù¥Î∏îÍ≥º JOINÌï† Îïå username ÌïÑÎìú ÏÇ¨Ïö©
-- ============================================================================

-- ============================================
-- 1Îã®Í≥Ñ: ÌòÑÏû¨ ÏÉÅÌÉú ÌôïÏù∏
-- ============================================
DO $$
DECLARE
    v_has_external_username BOOLEAN;
    v_has_username BOOLEAN;
    v_record_count INTEGER;
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE '========================================';
    RAISE NOTICE 'üìä game_records ÌÖåÏù¥Î∏î ÏÉÅÌÉú Ï†êÍ≤Ä';
    RAISE NOTICE '========================================';
    RAISE NOTICE '';
    
    -- external_username Ïª¨Îüº Ï°¥Ïû¨ Ïó¨Î∂Ä
    SELECT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'game_records' AND column_name = 'external_username'
    ) INTO v_has_external_username;
    
    -- username Ïª¨Îüº Ï°¥Ïû¨ Ïó¨Î∂Ä
    SELECT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'game_records' AND column_name = 'username'
    ) INTO v_has_username;
    
    -- Î†àÏΩîÎìú Í∞úÏàò
    SELECT COUNT(*) INTO v_record_count FROM game_records;
    
    RAISE NOTICE 'Ïª¨Îüº Ï°¥Ïû¨ Ïó¨Î∂Ä:';
    RAISE NOTICE '  external_username: %', CASE WHEN v_has_external_username THEN '‚úì Ï°¥Ïû¨' ELSE '‚úó ÏóÜÏùå' END;
    RAISE NOTICE '  username: %', CASE WHEN v_has_username THEN '‚úì Ï°¥Ïû¨' ELSE '‚úó ÏóÜÏùå' END;
    RAISE NOTICE '';
    RAISE NOTICE 'Ï¥ù Î†àÏΩîÎìú: %Í±¥', v_record_count;
    RAISE NOTICE '';
    
    IF v_has_external_username AND NOT v_has_username THEN
        RAISE NOTICE '‚úÖ Ïª¨ÎüºÎ™Ö Î≥ÄÍ≤Ω Í∞ÄÎä•';
    ELSIF NOT v_has_external_username AND v_has_username THEN
        RAISE NOTICE '‚úÖ Ïù¥ÎØ∏ username Ïª¨ÎüºÏúºÎ°ú Î≥ÄÍ≤ΩÎê®';
    ELSIF v_has_external_username AND v_has_username THEN
        RAISE NOTICE '‚ö†Ô∏è Îëê Ïª¨ÎüºÏù¥ Î™®Îëê Ï°¥Ïû¨Ìï® (external_username ÏÇ≠Ï†ú ÌïÑÏöî)';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è Îëê Ïª¨Îüº Î™®Îëê ÏóÜÏùå (username ÏÉùÏÑ± ÌïÑÏöî)';
    END IF;
    
    RAISE NOTICE '========================================';
    RAISE NOTICE '';
END $$;

-- ============================================
-- 2Îã®Í≥Ñ: external_usernameÏùÑ usernameÏúºÎ°ú Î≥ÄÍ≤Ω
-- ============================================
DO $$
BEGIN
    RAISE NOTICE '========================================';
    RAISE NOTICE 'üîß Ïª¨ÎüºÎ™Ö Î≥ÄÍ≤Ω ÏãúÏûë...';
    RAISE NOTICE '========================================';
    RAISE NOTICE '';
    
    -- external_usernameÏù¥ ÏûàÍ≥† usernameÏù¥ ÏóÜÎäî Í≤ΩÏö∞
    IF EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'game_records' AND column_name = 'external_username'
    ) AND NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'game_records' AND column_name = 'username'
    ) THEN
        ALTER TABLE game_records RENAME COLUMN external_username TO username;
        RAISE NOTICE '   ‚úì external_username ‚Üí username Î≥ÄÍ≤Ω ÏôÑÎ£å';
        
    -- usernameÏù¥ Ïù¥ÎØ∏ ÏûàÎäî Í≤ΩÏö∞ (external_usernameÎèÑ ÏûàÏúºÎ©¥ ÏÇ≠Ï†ú)
    ELSIF EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'game_records' AND column_name = 'username'
    ) THEN
        RAISE NOTICE '   ‚úì username Ïª¨Îüº Ïù¥ÎØ∏ Ï°¥Ïû¨';
        
        -- external_usernameÏù¥ ÎÇ®ÏïÑÏûàÏúºÎ©¥ ÏÇ≠Ï†ú
        IF EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'game_records' AND column_name = 'external_username'
        ) THEN
            ALTER TABLE game_records DROP COLUMN external_username;
            RAISE NOTICE '   ‚úì Ï§ëÎ≥µ Ïª¨Îüº external_username ÏÇ≠Ï†ú';
        END IF;
        
    -- Îëê Ïª¨Îüº Î™®Îëê ÏóÜÎäî Í≤ΩÏö∞ username ÏÉùÏÑ±
    ELSE
        ALTER TABLE game_records ADD COLUMN username TEXT;
        RAISE NOTICE '   ‚úì username Ïª¨Îüº ÏÉùÏÑ±';
    END IF;
    
    RAISE NOTICE '';
    RAISE NOTICE '‚úÖ Ïª¨ÎüºÎ™Ö Î≥ÄÍ≤Ω ÏôÑÎ£å';
    RAISE NOTICE '';
END $$;

-- ============================================
-- 3Îã®Í≥Ñ: username Ïù∏Îç±Ïä§ ÏÉùÏÑ±
-- ============================================
DO $$
BEGIN
    RAISE NOTICE '========================================';
    RAISE NOTICE '‚ö° Ïù∏Îç±Ïä§ ÏÉùÏÑ±...';
    RAISE NOTICE '========================================';
    RAISE NOTICE '';
    
    -- username Ïù∏Îç±Ïä§
    CREATE INDEX IF NOT EXISTS idx_game_records_username 
    ON game_records(username) WHERE username IS NOT NULL;
    RAISE NOTICE '   ‚úì idx_game_records_username';
    
    -- username + played_at Î≥µÌï© Ïù∏Îç±Ïä§
    CREATE INDEX IF NOT EXISTS idx_game_records_username_played_at 
    ON game_records(username, played_at DESC) WHERE username IS NOT NULL;
    RAISE NOTICE '   ‚úì idx_game_records_username_played_at';
    
    RAISE NOTICE '';
    RAISE NOTICE '‚úÖ Ïù∏Îç±Ïä§ ÏÉùÏÑ± ÏôÑÎ£å';
    RAISE NOTICE '';
END $$;

-- ============================================
-- 4Îã®Í≥Ñ: save_betting_records_from_api Ìï®Ïàò ÏóÖÎç∞Ïù¥Ìä∏
-- ============================================
CREATE OR REPLACE FUNCTION save_betting_records_from_api(p_records JSONB)
RETURNS TABLE (
    success BOOLEAN,
    saved_count INTEGER,
    skipped_count INTEGER,
    error_count INTEGER,
    errors TEXT[]
) 
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    v_record JSONB;
    v_saved INTEGER := 0;
    v_skipped INTEGER := 0;
    v_error INTEGER := 0;
    v_errors TEXT[] := '{}';
    v_external_txid TEXT;
    v_username TEXT;
    v_user_id UUID;
    v_partner_id UUID;
    v_error_msg TEXT;
BEGIN
    FOR v_record IN SELECT * FROM jsonb_array_elements(p_records)
    LOOP
        BEGIN
            v_external_txid := v_record->>'txid';
            v_username := v_record->>'username';  -- APIÏóêÏÑú Î∞õÏùÄ username
            
            -- Ï§ëÎ≥µ Ï≤¥ÌÅ¨
            IF EXISTS (SELECT 1 FROM game_records WHERE external_txid = v_external_txid) THEN
                v_skipped := v_skipped + 1;
                CONTINUE;
            END IF;
            
            -- usernameÏúºÎ°ú user_id Ï°∞Ìöå (optional)
            v_user_id := NULL;
            v_partner_id := NULL;
            
            IF v_username IS NOT NULL THEN
                SELECT u.id, u.referrer_id 
                INTO v_user_id, v_partner_id
                FROM users u
                WHERE u.username = v_username
                LIMIT 1;
            END IF;
            
            -- Î≤†ÌåÖ Î†àÏΩîÎìú ÏÇΩÏûÖ (username ÌïÑÎìúÎ°ú Ï†ÄÏû•)
            -- Ïã§Ï†ú game_records ÌÖåÏù¥Î∏î Íµ¨Ï°∞:
            -- id, external_txid, user_id, game_id, provider_id, bet_amount, win_amount,
            -- balance_before, balance_after, played_at, created_at, session_id,
            -- bonus_amount, currency, device_type, ip_address, profit_loss,
            -- time_category, game_type, partner_id, updated_at, sync_status,
            -- round_id, game_round_id, username (Î≥ÄÍ≤ΩÎê† Ïª¨Îüº)
            INSERT INTO game_records (
                external_txid,
                username,          -- ‚úÖ external_username ‚Üí usernameÏúºÎ°ú Î≥ÄÍ≤ΩÎê®
                user_id,
                partner_id,
                provider_id,
                game_id,
                game_type,
                bet_amount,
                win_amount,
                profit_loss,
                balance_before,
                balance_after,
                currency,
                round_id,
                game_round_id,
                session_id,
                played_at,
                created_at,
                updated_at
            ) VALUES (
                v_external_txid,
                v_username,        -- ‚úÖ username Ï†ÄÏû•
                v_user_id,
                v_partner_id,
                COALESCE((v_record->>'provider_id')::INTEGER, 0),
                COALESCE((v_record->>'game_id')::INTEGER, 0),
                COALESCE(v_record->>'game_type', 'slot'),
                COALESCE((v_record->>'bet_amount')::DECIMAL, 0),
                COALESCE((v_record->>'win_amount')::DECIMAL, 0),
                COALESCE((v_record->>'profit_loss')::DECIMAL, 0),
                COALESCE((v_record->>'balance_before')::DECIMAL, 0),
                COALESCE((v_record->>'balance_after')::DECIMAL, 0),
                COALESCE(v_record->>'currency', 'KRW'),
                v_record->>'round_id',
                v_record->>'game_round_id',
                v_record->>'session_id',
                CASE 
                    WHEN v_record->>'played_at' IS NOT NULL 
                    THEN (v_record->>'played_at')::TIMESTAMPTZ 
                    ELSE NOW() 
                END,
                NOW(),
                NOW()
            );
            
            v_saved := v_saved + 1;
            
        EXCEPTION WHEN OTHERS THEN
            v_error := v_error + 1;
            v_error_msg := 'TX ' || COALESCE(v_external_txid, 'NULL') || ': ' || SQLERRM;
            v_errors := array_append(v_errors, v_error_msg);
        END;
    END LOOP;
    
    RETURN QUERY SELECT TRUE, v_saved, v_skipped, v_error, v_errors;
END;
$$;

-- Í∂åÌïú Î∂ÄÏó¨
GRANT EXECUTE ON FUNCTION save_betting_records_from_api(JSONB) TO authenticated, anon;

-- ============================================
-- 5Îã®Í≥Ñ: ÏµúÏ¢Ö ÌôïÏù∏
-- ============================================
DO $$
DECLARE
    v_total_count INTEGER;
    v_with_username INTEGER;
    v_with_user_id INTEGER;
    v_sample RECORD;
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE '========================================';
    RAISE NOTICE '‚úÖ ÏµúÏ¢Ö ÌôïÏù∏';
    RAISE NOTICE '========================================';
    RAISE NOTICE '';
    
    -- Ï†ÑÏ≤¥ Î†àÏΩîÎìú Ïàò
    SELECT COUNT(*) INTO v_total_count FROM game_records;
    
    -- usernameÏù¥ ÏûàÎäî Î†àÏΩîÎìú Ïàò
    SELECT COUNT(*) INTO v_with_username 
    FROM game_records 
    WHERE username IS NOT NULL;
    
    -- user_idÍ∞Ä ÏûàÎäî Î†àÏΩîÎìú Ïàò
    SELECT COUNT(*) INTO v_with_user_id 
    FROM game_records 
    WHERE user_id IS NOT NULL;
    
    RAISE NOTICE 'ÌÜµÍ≥Ñ:';
    RAISE NOTICE '  Ï†ÑÏ≤¥ Î†àÏΩîÎìú: %Í±¥', v_total_count;
    RAISE NOTICE '  username ÏûàÏùå: %Í±¥ (%.1f%%)', 
        v_with_username, 
        CASE WHEN v_total_count > 0 THEN (v_with_username::NUMERIC / v_total_count * 100) ELSE 0 END;
    RAISE NOTICE '  user_id ÏûàÏùå: %Í±¥ (%.1f%%)', 
        v_with_user_id,
        CASE WHEN v_total_count > 0 THEN (v_with_user_id::NUMERIC / v_total_count * 100) ELSE 0 END;
    RAISE NOTICE '';
    
    -- ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
    IF v_total_count > 0 THEN
        SELECT 
            external_txid,
            username,
            user_id,
            game_type,
            bet_amount,
            win_amount,
            played_at
        INTO v_sample
        FROM game_records
        ORDER BY played_at DESC
        LIMIT 1;
        
        RAISE NOTICE 'ÏµúÍ∑º Îç∞Ïù¥ÌÑ∞ ÏÉòÌîå:';
        RAISE NOTICE '  txid: %', v_sample.external_txid;
        RAISE NOTICE '  username: %', COALESCE(v_sample.username, '(NULL)');
        RAISE NOTICE '  user_id: %', COALESCE(v_sample.user_id::TEXT, '(NULL)');
        RAISE NOTICE '  game_type: %', v_sample.game_type;
        RAISE NOTICE '  bet_amount: %', v_sample.bet_amount;
        RAISE NOTICE '  played_at: %', v_sample.played_at;
    END IF;
    
    RAISE NOTICE '';
    RAISE NOTICE '========================================';
    RAISE NOTICE 'üéâ Ïª¨ÎüºÎ™Ö Î≥ÄÍ≤Ω ÏôÑÎ£å!';
    RAISE NOTICE '========================================';
    RAISE NOTICE '';
    RAISE NOTICE 'Î≥ÄÍ≤Ω ÏÇ¨Ìï≠:';
    RAISE NOTICE '  ‚úì external_username ‚Üí username';
    RAISE NOTICE '  ‚úì username Ïù∏Îç±Ïä§ ÏÉùÏÑ±';
    RAISE NOTICE '  ‚úì save_betting_records_from_api Ìï®Ïàò ÏóÖÎç∞Ïù¥Ìä∏';
    RAISE NOTICE '';
    RAISE NOTICE 'Ïù¥Ï†ú BettingManagement.tsxÏóêÏÑú Ï†ïÏÉÅ ÌëúÏãúÎê©ÎãàÎã§!';
    RAISE NOTICE '';
    RAISE NOTICE '========================================';
    RAISE NOTICE '';
END $$;
