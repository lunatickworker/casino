import { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "../ui/card";
import { Button } from "../ui/button";
import { Input } from "../ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../ui/select";
import { Badge } from "../ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "../ui/tabs";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "../ui/dropdown-menu";
import { DataTable } from "../common/DataTable";
import { RefreshCw, Search, Eye, EyeOff, Settings, Play, Download, AlertTriangle } from "lucide-react";
import { toast } from "sonner@2.0.3";
import { Partner } from "../../types";
import { investApi } from "../../lib/investApi";
import { gameApi } from "../../lib/gameApi";

interface Game {
  id: number;
  provider_id: number;
  name: string;
  type: string;
  status: string;
  image_url?: string;
  demo_available: boolean;
  created_at: string;
  updated_at: string;
  provider_name?: string;
}

interface GameProvider {
  id: number;
  name: string;
  type: string;
  status: string;
  logo_url?: string;
  created_at: string;
}

interface GameManagementProps {
  user: Partner;
}

export function GameManagement({ user }: GameManagementProps) {
  // ÏÉÅÌÉú Í¥ÄÎ¶¨
  const [activeTab, setActiveTab] = useState("casino");
  const [games, setGames] = useState<Game[]>([]);
  const [providers, setProviders] = useState<GameProvider[]>([]);
  const [loading, setLoading] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedProvider, setSelectedProvider] = useState<string>("all");
  const [selectedStatus, setSelectedStatus] = useState<string>("all");
  const [syncingProviders, setSyncingProviders] = useState<Set<number>>(new Set());

  // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  useEffect(() => {
    initializeData();
  }, []);

  // Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  const initializeData = async () => {
    try {
      setLoading(true);
      
      // Ï†úÍ≥µÏÇ¨ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
      const providersData = await gameApi.getProviders();
      setProviders(providersData);
      
      // Ïπ¥ÏßÄÎÖ∏ Î°úÎπÑ Í≤åÏûÑ Ï¥àÍ∏∞Ìôî (ÌïÑÏöîÏãú ÏûêÎèô ÏÉùÏÑ±)
      await gameApi.initializeCasinoLobbyGames();
      
      // Ï¥àÍ∏∞ Í≤åÏûÑ Îç∞Ïù¥ÌÑ∞ Î°úÎìú (Ïπ¥ÏßÄÎÖ∏Î∂ÄÌÑ∞ ÏãúÏûë)
      await loadGames("casino");
      
    } catch (error) {
      console.error('Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
      toast.error('Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    } finally {
      setLoading(false);
    }
  };

  // Í≤åÏûÑ Î™©Î°ù Î°úÎìú
  const loadGames = async (gameType?: string) => {
    try {
      setLoading(true);
      
      const type = gameType || activeTab;
      const params: any = { type: type === "casino" ? "casino" : "slot" };
      
      // ÌïÑÌÑ∞ Ï†ÅÏö©
      if (selectedProvider !== "all") {
        params.provider_id = parseInt(selectedProvider);
      }
      if (selectedStatus !== "all") {
        params.status = selectedStatus;
      }
      if (searchTerm.trim()) {
        params.search = searchTerm.trim();
      }
      
      const data = await gameApi.getGames(params);
      setGames(data);
      
    } catch (error) {
      console.error('Í≤åÏûÑ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
      toast.error('Í≤åÏûÑ Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    } finally {
      setLoading(false);
    }
  };

  // ÌÉ≠ Î≥ÄÍ≤Ω Ï≤òÎ¶¨
  const handleTabChange = async (newTab: string) => {
    console.log(`üîÑ ÌÉ≠ Î≥ÄÍ≤Ω: ${activeTab} -> ${newTab}`);
    setActiveTab(newTab);
    setSelectedProvider("all");
    setSelectedStatus("all");
    setSearchTerm("");
    
    // ÌÉ≠ Î≥ÄÍ≤Ω ÌõÑ Ï¶âÏãú Ìï¥Îãπ ÌÉÄÏûÖÏùò Í≤åÏûÑ Î°úÎìú
    try {
      setLoading(true);
      
      // Ïπ¥ÏßÄÎÖ∏ ÌÉ≠ÏúºÎ°ú Î≥ÄÍ≤ΩÏãú Ïπ¥ÏßÄÎÖ∏ Î°úÎπÑ Í≤åÏûÑ Ï¥àÍ∏∞Ìôî
      if (newTab === "casino") {
        await gameApi.initializeCasinoLobbyGames();
      }
      
      const type = newTab === "casino" ? "casino" : "slot";
      const data = await gameApi.getGames({ type });
      setGames(data);
      console.log(`‚úÖ ${newTab} ÌÉ≠ Í≤åÏûÑ Î°úÎìú ÏôÑÎ£å: ${data.length}Í∞ú`);
      
      if (data.length === 0 && newTab === "casino") {
        console.warn('‚ö†Ô∏è Ïπ¥ÏßÄÎÖ∏ Í≤åÏûÑÏù¥ ÏóÜÏäµÎãàÎã§. Ï†úÍ≥µÏÇ¨ ÏÑ§Ï†ïÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.');
      }
      
    } catch (error) {
      console.error(`${newTab} ÌÉ≠ Í≤åÏûÑ Î°úÎìú Ïã§Ìå®:`, error);
      toast.error(`${newTab === "casino" ? "Ïπ¥ÏßÄÎÖ∏" : "Ïä¨Î°Ø"} Í≤åÏûÑÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.`);
      setGames([]); // Ïã§Ìå® Ïãú Îπà Î∞∞Ïó¥Î°ú ÏÑ§Ï†ï
    } finally {
      setLoading(false);
    }
  };

  // Í≤ÄÏÉâÏñ¥ÏôÄ ÏÉÅÌÉú ÌïÑÌÑ∞ Î≥ÄÍ≤Ω Ïãú ÎîîÎ∞îÏö¥Ïä§ Ï≤òÎ¶¨
  useEffect(() => {
    const timer = setTimeout(() => {
      if (providers.length > 0 && syncingProviders.size === 0) {
        console.log('üîç ÎîîÎ∞îÏö¥Ïä§ Í≤ÄÏÉâ Ïã§Ìñâ:', { searchTerm, selectedStatus, activeTab });
        loadGames();
      }
    }, 300);
    return () => clearTimeout(timer);
  }, [searchTerm, selectedStatus]);

  // Ï†úÍ≥µÏÇ¨ ÌïÑÌÑ∞ Î≥ÄÍ≤Ω Ïãú Ï¶âÏãú Í≤åÏûÑ Î°úÎìú (ÎèôÍ∏∞Ìôî Ï§ëÏù¥ ÏïÑÎãê ÎïåÎßå)
  useEffect(() => {
    if (providers.length > 0 && syncingProviders.size === 0) {
      console.log('üéØ Ï†úÍ≥µÏÇ¨ ÌïÑÌÑ∞ Î≥ÄÍ≤ΩÏúºÎ°ú Í≤åÏûÑ Î°úÎìú:', { selectedProvider, activeTab });
      loadGames();
    }
  }, [selectedProvider]);

  // Ï†úÍ≥µÏÇ¨Î≥Ñ Í≤åÏûÑ ÎèôÍ∏∞Ìôî (ÏµúÏ†ÅÌôîÎêú Î≤ÑÏ†Ñ)
  const syncProviderGames = async (providerId: number) => {
    const provider = providers.find(p => p.id === providerId);
    if (!provider) {
      toast.error('Ï†úÍ≥µÏÇ¨Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
      return;
    }

    if (provider.type === 'casino') {
      toast.info('Ïπ¥ÏßÄÎÖ∏Îäî Î°úÎπÑ ÏßÑÏûÖ Î∞©ÏãùÏúºÎ°ú Í≤åÏûÑ Î™©Î°ùÏù¥ ÏóÜÏäµÎãàÎã§.');
      return;
    }

    if (syncingProviders.has(providerId)) {
      toast.warning('Ïù¥ÎØ∏ ÎèôÍ∏∞ÌôîÍ∞Ä ÏßÑÌñâ Ï§ëÏûÖÎãàÎã§.');
      return;
    }

    // ÎèôÍ∏∞Ìôî ÏãúÏûë
    setSyncingProviders(prev => new Set([...prev, providerId]));
    const startTime = Date.now();
    
    try {
      const systemConfig = investApi.INVEST_CONFIGS.system_admin;
      
      // ÌÉÄÏûÑÏïÑÏõÉ ÏÑ§Ï†ïÏúºÎ°ú API Ìò∏Ï∂ú ÏµúÏ†ÅÌôî (4Ï¥à Ïù¥ÎÇ¥ Î™©Ìëú)
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 3500); // 3.5Ï¥à ÌÉÄÏûÑÏïÑÏõÉ
      
      let response;
      try {
        // API Ìò∏Ï∂ú
        response = await Promise.race([
          investApi.getGameList(systemConfig.opcode, providerId, systemConfig.secretKey),
          new Promise((_, reject) => 
            setTimeout(() => reject(new Error('API Ìò∏Ï∂ú ÏãúÍ∞Ñ Ï¥àÍ≥º (3.5Ï¥à)')), 3500)
          )
        ]);
        clearTimeout(timeoutId);
      } catch (timeoutError) {
        clearTimeout(timeoutId);
        throw new Error('API ÏùëÎãµ ÏãúÍ∞ÑÏù¥ Ï¥àÍ≥ºÎêòÏóàÏäµÎãàÎã§. ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.');
      }
      
      if (response.error) {
        throw new Error(`API Ïò§Î•ò: ${response.error}`);
      }
      
      // Í≤åÏûÑ Î™©Î°ù Ï∂îÏ∂ú (ÏÑ±Îä• ÏµúÏ†ÅÌôî)
      let gamesList: any[] = [];
      const data = response.data;
      
      if (Array.isArray(data)) {
        gamesList = data;
      } else if (data?.DATA && Array.isArray(data.DATA)) {
        gamesList = data.DATA;
      } else if (data?.data && Array.isArray(data.data)) {
        gamesList = data.data;
      } else if (data?.games && Array.isArray(data.games)) {
        gamesList = data.games;
      } else if (data?.list && Array.isArray(data.list)) {
        gamesList = data.list;
      } else {
        console.error(`‚ùå ${provider.name} Ïïå Ïàò ÏóÜÎäî ÏùëÎãµ Íµ¨Ï°∞:`, data);
        throw new Error('Í≤åÏûÑ Îç∞Ïù¥ÌÑ∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
      }
      
      if (gamesList.length === 0) {
        toast.warning(`${provider.name}ÏóêÏÑú Í≤åÏûÑ Îç∞Ïù¥ÌÑ∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.`);
        return;
      }
      
      console.log(`üöÄ ${provider.name} Í≤åÏûÑ ${gamesList.length}Í∞ú ÎèôÍ∏∞Ìôî ÏãúÏûë`);
      
      // DBÏóê ÎèôÍ∏∞Ìôî (Î∞∞Ïπò Ï≤òÎ¶¨Î°ú ÏµúÏ†ÅÌôî)
      const result = await gameApi.syncGamesFromAPI(providerId, gamesList);
      
      const endTime = Date.now();
      const duration = ((endTime - startTime) / 1000).toFixed(1);
      
      console.log(`‚úÖ ${provider.name} ÎèôÍ∏∞Ìôî ÏôÑÎ£å (${duration}Ï¥à):`, result);
      toast.success(`${provider.name}: Ïã†Í∑ú ${result.newGames}Í∞ú, ÏóÖÎç∞Ïù¥Ìä∏ ${result.updatedGames}Í∞ú (${duration}Ï¥à)`);
      
      // ÎèôÍ∏∞Ìôî ÏôÑÎ£å ÌõÑ Ï¶âÏãú Ìï¥Îãπ Ï†úÍ≥µÏÇ¨Î°ú ÌïÑÌÑ∞ÎßÅÌïòÏó¨ Í≤åÏûÑ Î°úÎìú
      setSelectedProvider(providerId.toString());
      
      // ÎèôÍ∏∞Ìôî ÏôÑÎ£å ÌõÑ Ìï¥Îãπ Ï†úÍ≥µÏÇ¨ Í≤åÏûÑÎßå Îπ†Î•¥Í≤å Î°úÎìú
      const params: any = { 
        type: "slot", // Ïä¨Î°Ø Í≤åÏûÑÎßå ÎèôÍ∏∞ÌôîÌïòÎØÄÎ°ú slotÏúºÎ°ú Í≥†Ï†ï
        provider_id: providerId 
      };
      if (selectedStatus !== "all") {
        params.status = selectedStatus;
      }
      if (searchTerm.trim()) {
        params.search = searchTerm.trim();
      }
      
      const syncedGames = await gameApi.getGames(params);
      setGames(syncedGames);
      console.log(`üîÑ ${provider.name} ÎèôÍ∏∞Ìôî ÏôÑÎ£å - ${syncedGames.length}Í∞ú Í≤åÏûÑ Î°úÎìúÎê®`);
      
    } catch (error: any) {
      const endTime = Date.now();
      const duration = ((endTime - startTime) / 1000).toFixed(1);
      console.error(`${provider.name} ÎèôÍ∏∞Ìôî Ïã§Ìå® (${duration}Ï¥à):`, error);
      toast.error(`${provider.name} ÎèôÍ∏∞Ìôî Ïã§Ìå®: ${error.message}`);
    } finally {
      // ÎèôÍ∏∞Ìôî ÏôÑÎ£å
      setSyncingProviders(prev => {
        const newSet = new Set(prev);
        newSet.delete(providerId);
        return newSet;
      });
    }
  };

  // Í≤åÏûÑ ÏÉÅÌÉú Î≥ÄÍ≤Ω
  const updateGameStatus = async (gameId: number, newStatus: string) => {
    try {
      await gameApi.updateGameStatus(gameId, newStatus);
      
      // Î°úÏª¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      setGames(prev => prev.map(game => 
        game.id === gameId ? { ...game, status: newStatus } : game
      ));
      
      const statusLabel = newStatus === 'visible' ? 'ÎÖ∏Ï∂ú' : 
                         newStatus === 'hidden' ? 'ÎπÑÎÖ∏Ï∂ú' : 'Ï†êÍ≤ÄÏ§ë';
      toast.success(`Í≤åÏûÑ ÏÉÅÌÉúÍ∞Ä "${statusLabel}"Î°ú Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§.`);
    } catch (error) {
      console.error('Í≤åÏûÑ ÏÉÅÌÉú Î≥ÄÍ≤Ω Ïã§Ìå®:', error);
      toast.error('Í≤åÏûÑ ÏÉÅÌÉú Î≥ÄÍ≤ΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    }
  };

  // Í≤åÏûÑ Ïã§Ìñâ (Ïä¨Î°Ø/Ïπ¥ÏßÄÎÖ∏ Î™®Îëê ÏßÄÏõê)
  const handleLaunchGame = async (game: Game) => {
    try {
      console.log(`üéÆ Í≤åÏûÑ Ïã§Ìñâ ÏãúÎèÑ:`, {
        gameId: game.id,
        gameName: game.name,
        gameType: game.type,
        providerId: game.provider_id
      });

      const systemConfig = investApi.INVEST_CONFIGS.system_admin;
      
      // Ïπ¥ÏßÄÎÖ∏ Í≤åÏûÑÏùò Í≤ΩÏö∞ Î°úÎπÑ Í≤åÏûÑ ID ÏÇ¨Ïö©
      let gameIdToLaunch = game.id;
      if (game.type === 'casino') {
        // Ïπ¥ÏßÄÎÖ∏ Î°úÎπÑ Í≤åÏûÑ ID Îß§Ìïë
        const casinoLobbies: Record<number, number> = {
          410: 410000, // ÏóêÎ≥ºÎ£®ÏÖò
          77: 77060,   // ÎßàÏù¥ÌÅ¨Î°úÍ≤åÏù¥Î∞ç
          2: 2029,     // Vivo Í≤åÏù¥Î∞ç
          30: 30000,   // ÏïÑÏãúÏïÑ Í≤åÏù¥Î∞ç
          78: 78001,   // ÌîÑÎùºÍ∑∏ÎßàÌã±ÌîåÎ†àÏù¥
          86: 86001,   // ÏÑπÏãúÍ≤åÏù¥Î∞ç
          11: 11000,   // ÎπÑÎπÑÏïÑÏù¥Ïóî
          28: 28000,   // ÎìúÎ¶ºÍ≤åÏûÑ
          89: 89000,   // Ïò§Î¶¨ÏóîÌÉàÍ≤åÏûÑ
          91: 91000,   // Î≥¥ÌÉÄ
          44: 44006,   // Ïù¥Ï£ºÍ∏∞
          85: 85036,   // ÌîåÎ†àÏù¥ÌÖç ÎùºÏù¥Î∏å
          0: 0         // Ï†úÎÑ§Îü¥ Ïπ¥ÏßÄÎÖ∏
        };
        
        const providerId = game.provider_id;
        if (casinoLobbies[providerId]) {
          gameIdToLaunch = casinoLobbies[providerId];
          console.log(`üé∞ Ïπ¥ÏßÄÎÖ∏ Î°úÎπÑ Í≤åÏûÑ ID Î≥ÄÌôò: ${game.id} -> ${gameIdToLaunch}`);
        }
      }
      
      const response = await investApi.launchGame(
        systemConfig.opcode,
        systemConfig.username,
        systemConfig.token,
        gameIdToLaunch,
        systemConfig.secretKey
      );
      
      console.log(`üéÆ Í≤åÏûÑ Ïã§Ìñâ API ÏùëÎãµ:`, response);
      
      // Îã§ÏñëÌïú ÏùëÎãµ Íµ¨Ï°∞ Ï≤òÎ¶¨
      let gameUrl = null;
      let isSuccess = false;
      
      if (response.data) {
        // Î∞©Î≤ï 1: response.data.RESULT === trueÏù¥Í≥† urlÏù¥ ÏûàÎäî Í≤ΩÏö∞
        if (response.data.RESULT === true && response.data.DATA?.url) {
          gameUrl = response.data.DATA.url;
          isSuccess = true;
        }
        // Î∞©Î≤ï 2: response.data.urlÏù¥ ÏßÅÏ†ë ÏûàÎäî Í≤ΩÏö∞
        else if (response.data.url) {
          gameUrl = response.data.url;
          isSuccess = true;
        }
        // Î∞©Î≤ï 3: response.data.data?.urlÏù¥ ÏûàÎäî Í≤ΩÏö∞
        else if (response.data.data?.url) {
          gameUrl = response.data.data.url;
          isSuccess = true;
        }
        // Î∞©Î≤ï 4: success ÌîåÎûòÍ∑∏Í∞Ä ÏûàÎäî Í≤ΩÏö∞
        else if (response.data.success && response.data.game_url) {
          gameUrl = response.data.game_url;
          isSuccess = true;
        }
      }
      
      if (isSuccess && gameUrl) {
        // Í≤åÏûÑ Ï∞Ω Ïó¥Í∏∞
        const gameWindow = window.open(
          gameUrl, 
          '_blank', 
          'width=1200,height=800,scrollbars=yes,resizable=yes'
        );
        
        if (gameWindow) {
          toast.success(`Í≤åÏûÑ "${game.name}"Ïù¥ Ïã§ÌñâÎêòÏóàÏäµÎãàÎã§.`);
          console.log(`‚úÖ Í≤åÏûÑ Ïã§Ìñâ ÏÑ±Í≥µ: ${gameUrl}`);
        } else {
          toast.error('ÌåùÏóÖÏù¥ Ï∞®Îã®ÎêòÏóàÏäµÎãàÎã§. ÌåùÏóÖÏùÑ ÌóàÏö©Ìï¥Ï£ºÏÑ∏Ïöî.');
        }
      } else {
        // Ïò§Î•ò Î©îÏãúÏßÄ Ï∂îÏ∂ú
        let errorMessage = 'Í≤åÏûÑ Ïã§ÌñâÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.';
        
        if (response.data?.DATA?.message) {
          errorMessage = response.data.DATA.message;
        } else if (response.data?.message) {
          errorMessage = response.data.message;
        } else if (response.data?.error) {
          errorMessage = response.data.error;
        } else if (response.error) {
          errorMessage = response.error;
        }
        
        console.error(`‚ùå Í≤åÏûÑ Ïã§Ìñâ Ïã§Ìå®:`, {
          response: response,
          errorMessage: errorMessage
        });
        
        toast.error(errorMessage);
      }
    } catch (error: any) {
      console.error('Í≤åÏûÑ Ïã§Ìñâ Ïò§Î•ò:', error);
      toast.error(`Í≤åÏûÑ Ïã§Ìñâ Ïã§Ìå®: ${error.message}`);
    }
  };

  // ÌòÑÏû¨ ÌÉ≠Ïóê ÎßûÎäî Ï†úÍ≥µÏÇ¨ ÌïÑÌÑ∞ÎßÅ
  const currentProviders = providers.filter(p => p.type === (activeTab === "casino" ? "casino" : "slot"));

  // ÌÖåÏù¥Î∏î Ïª¨Îüº Ï†ïÏùò
  const gameColumns = [
    {
      key: "id",
      title: "Í≤åÏûÑ ID",
      sortable: true,
    },
    {
      key: "name",
      title: "Í≤åÏûÑÎ™Ö",
      sortable: true,
      cell: (game: Game) => (
        <div className="flex items-center gap-3">
          {game.image_url && (
            <img src={game.image_url} alt={game.name} className="w-10 h-10 rounded object-cover" />
          )}
          <div>
            <div className="font-medium">{game.name}</div>
            <div className="text-sm text-muted-foreground">ID: {game.id}</div>
          </div>
        </div>
      ),
    },
    {
      key: "provider_name",
      title: "Ï†úÍ≥µÏÇ¨",
      sortable: true,
    },
    {
      key: "type",
      title: "ÌÉÄÏûÖ",
      cell: (game: Game) => (
        <Badge variant={game.type === 'slot' ? 'default' : 'secondary'}>
          {game.type === 'slot' ? 'Ïä¨Î°Ø' : 'Ïπ¥ÏßÄÎÖ∏'}
        </Badge>
      ),
    },
    {
      key: "status",
      title: "ÏÉÅÌÉú",
      cell: (game: Game) => {
        const statusConfig = {
          visible: { label: 'ÎÖ∏Ï∂ú', color: 'bg-green-100 text-green-800 hover:bg-green-200' },
          hidden: { label: 'ÎπÑÎÖ∏Ï∂ú', color: 'bg-gray-100 text-gray-800 hover:bg-gray-200' },
          maintenance: { label: 'Ï†êÍ≤ÄÏ§ë', color: 'bg-red-100 text-red-800 hover:bg-red-200' }
        };
        const config = statusConfig[game.status as keyof typeof statusConfig] || statusConfig.hidden;
        
        return (
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="sm" className={`h-7 ${config.color}`}>
                {config.label}
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="start">
              <DropdownMenuItem 
                onClick={() => updateGameStatus(game.id, 'visible')}
                disabled={game.status === 'visible'}
              >
                <Eye className="h-4 w-4 mr-2" />
                ÎÖ∏Ï∂ú
              </DropdownMenuItem>
              <DropdownMenuItem 
                onClick={() => updateGameStatus(game.id, 'hidden')}
                disabled={game.status === 'hidden'}
              >
                <EyeOff className="h-4 w-4 mr-2" />
                ÎπÑÎÖ∏Ï∂ú
              </DropdownMenuItem>
              <DropdownMenuItem 
                onClick={() => updateGameStatus(game.id, 'maintenance')}
                disabled={game.status === 'maintenance'}
              >
                <Settings className="h-4 w-4 mr-2" />
                Ï†êÍ≤ÄÏ§ë
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        );
      },
    },
    {
      key: "actions",
      title: "Í¥ÄÎ¶¨",
      cell: (game: Game) => (
        <Button
          size="sm"
          variant="outline"
          onClick={() => handleLaunchGame(game)}
          className="h-8 px-3 flex items-center gap-1"
        >
          <Play className="h-4 w-4" />
          Ïã§Ìñâ
        </Button>
      ),
    },
  ];

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">Í≤åÏûÑ Í¥ÄÎ¶¨</h1>
          <p className="text-muted-foreground">
            Ïπ¥ÏßÄÎÖ∏ Î°úÎπÑ Î∞è Ïä¨Î°Ø Í≤åÏûÑ Î¶¨Ïä§Ìä∏Î•º Í¥ÄÎ¶¨ÌïòÍ≥† ÎÖ∏Ï∂ú ÏÉÅÌÉúÎ•º ÏÑ§Ï†ïÌï©ÎãàÎã§.
          </p>
        </div>
        <Button 
          onClick={() => loadGames()} 
          disabled={loading} 
          className="flex items-center gap-2"
        >
          <RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />
          ÏÉàÎ°úÍ≥†Ïπ®
        </Button>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Í≤åÏûÑ Î¶¨Ïä§Ìä∏ Í¥ÄÎ¶¨ ÏãúÏä§ÌÖú</CardTitle>
          <CardDescription>
            Í∞Å Ï†úÍ≥µÏÇ¨Î≥Ñ Í≤åÏûÑ Îç∞Ïù¥ÌÑ∞Î•º Í¥ÄÎ¶¨ÌïòÍ≥† Í≤åÏûÑÎ≥Ñ ÎÖ∏Ï∂ú ÏÉÅÌÉúÎ•º ÏÑ§Ï†ïÌï©ÎãàÎã§.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Tabs value={activeTab} onValueChange={handleTabChange} className="space-y-4">
            <TabsList className={`grid w-full ${user.level === 1 ? 'grid-cols-3' : 'grid-cols-2'}`}>
              <TabsTrigger value="casino">
                ÎùºÏù¥Î∏å Ïπ¥ÏßÄÎÖ∏ ({providers.filter(p => p.type === 'casino').length}Í∞ú)
              </TabsTrigger>
              <TabsTrigger value="slot">
                Ïä¨Î°Ø Í≤åÏûÑ ({providers.filter(p => p.type === 'slot').length}Í∞ú)
              </TabsTrigger>

            </TabsList>

            <TabsContent value="casino" className="space-y-4">
              <div className="flex flex-col sm:flex-row gap-4">
                <div className="flex-1">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
                    <Input
                      placeholder="Ïπ¥ÏßÄÎÖ∏Î™ÖÏúºÎ°ú Í≤ÄÏÉâ..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-9"
                    />
                  </div>
                </div>
                <Select value={selectedStatus} onValueChange={setSelectedStatus}>
                  <SelectTrigger className="w-[140px]">
                    <SelectValue placeholder="ÏÉÅÌÉú ÏÑ†ÌÉù" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">Ï†ÑÏ≤¥ ÏÉÅÌÉú</SelectItem>
                    <SelectItem value="visible">ÎÖ∏Ï∂ú</SelectItem>
                    <SelectItem value="hidden">ÎπÑÎÖ∏Ï∂ú</SelectItem>
                    <SelectItem value="maintenance">Ï†êÍ≤ÄÏ§ë</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <DataTable
                data={games}
                columns={gameColumns}
                loading={loading}
                emptyMessage="Ïπ¥ÏßÄÎÖ∏ Í≤åÏûÑÏù¥ ÏóÜÏäµÎãàÎã§."
              />
            </TabsContent>

            <TabsContent value="slot" className="space-y-4">
              <div>
                <h3 className="font-medium mb-3">Ïä¨Î°Ø Ï†úÍ≥µÏÇ¨Î≥Ñ Í≤åÏûÑ ÎèôÍ∏∞Ìôî</h3>
                <p className="text-sm text-muted-foreground mb-3">
                  ÌÅ¥Î¶≠ÌïòÏó¨ Ïô∏Î∂Ä APIÏóêÏÑú Í≤åÏûÑ Î™©Î°ùÏùÑ Í∞ÄÏ†∏ÏòµÎãàÎã§. {syncingProviders.size > 0 && <span className="text-orange-600">ÎèôÍ∏∞Ìôî ÏßÑÌñâ Ï§ë...</span>}
                </p>
                <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-2">
                  {currentProviders.map((provider) => (
                    <Button
                      key={provider.id}
                      size="sm"
                      variant={selectedProvider === provider.id.toString() ? "default" : "outline"}
                      onClick={() => syncProviderGames(provider.id)}
                      disabled={syncingProviders.size > 0} // ÏïÑÎ¨¥ ÎèôÍ∏∞ÌôîÍ∞Ä ÏßÑÌñâ Ï§ëÏù¥Î©¥ Î™®Îì† Î≤ÑÌäº ÎπÑÌôúÏÑ±Ìôî
                      className="flex items-center justify-center gap-2"
                    >
                      <Download className={`h-3 w-3 ${syncingProviders.has(provider.id) ? 'animate-bounce' : ''}`} />
                      <span className="truncate">{provider.name}</span>
                      {syncingProviders.has(provider.id) && (
                        <span className="text-xs">ÎèôÍ∏∞ÌôîÏ§ë...</span>
                      )}
                    </Button>
                  ))}
                </div>
              </div>

              <div className="flex flex-col sm:flex-row gap-4 pt-4 border-t">
                <div className="flex-1">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
                    <Input
                      placeholder="Í≤åÏûÑÎ™ÖÏúºÎ°ú Í≤ÄÏÉâ..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-9"
                    />
                  </div>
                </div>
                <Select value={selectedProvider} onValueChange={setSelectedProvider}>
                  <SelectTrigger className="w-[180px]">
                    <SelectValue placeholder="Ï†úÍ≥µÏÇ¨ ÏÑ†ÌÉù" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">Ï†ÑÏ≤¥ Ï†úÍ≥µÏÇ¨</SelectItem>
                    {currentProviders.map((provider) => (
                      <SelectItem key={provider.id} value={provider.id.toString()}>
                        {provider.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <Select value={selectedStatus} onValueChange={setSelectedStatus}>
                  <SelectTrigger className="w-[140px]">
                    <SelectValue placeholder="ÏÉÅÌÉú ÏÑ†ÌÉù" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">Ï†ÑÏ≤¥ ÏÉÅÌÉú</SelectItem>
                    <SelectItem value="visible">ÎÖ∏Ï∂ú</SelectItem>
                    <SelectItem value="hidden">ÎπÑÎÖ∏Ï∂ú</SelectItem>
                    <SelectItem value="maintenance">Ï†êÍ≤ÄÏ§ë</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <DataTable
                data={games}
                columns={gameColumns}
                loading={loading}
                emptyMessage="Ïä¨Î°Ø Í≤åÏûÑÏù¥ ÏóÜÏäµÎãàÎã§. ÏÉÅÎã®Ïùò Ï†úÍ≥µÏÇ¨ ÎèôÍ∏∞Ìôî Î≤ÑÌäºÏùÑ ÎàåÎü¨ Í≤åÏûÑÏùÑ Í∞ÄÏ†∏Ïò§ÏÑ∏Ïöî."
              />
            </TabsContent>


          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
}